//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientTest.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IServerSocket", CallbackContract=typeof(ClientTest.ServiceReference1.IServerSocketCallback))]
    public interface IServerSocket {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerSocket/RegiestForUpdates")]
        void RegiestForUpdates(string ticket);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerSocket/RegiestForUpdates")]
        System.Threading.Tasks.Task RegiestForUpdatesAsync(string ticket);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerSocketCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerSocket/PriceUpdate", ReplyAction="http://tempuri.org/IServerSocket/PriceUpdateResponse")]
        void PriceUpdate(string ticket, double price);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerSocketChannel : ClientTest.ServiceReference1.IServerSocket, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServerSocketClient : System.ServiceModel.DuplexClientBase<ClientTest.ServiceReference1.IServerSocket>, ClientTest.ServiceReference1.IServerSocket {
        
        public ServerSocketClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServerSocketClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServerSocketClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServerSocketClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServerSocketClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void RegiestForUpdates(string ticket) {
            base.Channel.RegiestForUpdates(ticket);
        }
        
        public System.Threading.Tasks.Task RegiestForUpdatesAsync(string ticket) {
            return base.Channel.RegiestForUpdatesAsync(ticket);
        }
    }
}
